/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory } from "ethers";
import type { Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Marketplace,
  MarketplaceInterface,
} from "../../contracts/Marketplace";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address payable",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "purchased",
        type: "bool",
      },
    ],
    name: "BuyItem",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address payable",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "purchased",
        type: "bool",
      },
    ],
    name: "CreateItem",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "buy",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
    ],
    name: "createItem",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_itemCount",
        type: "uint256",
      },
    ],
    name: "getItem",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "owner",
            type: "address",
          },
          {
            internalType: "bool",
            name: "purchased",
            type: "bool",
          },
        ],
        internalType: "struct Marketplace.Item",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getItemCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_itemCount",
        type: "uint256",
      },
    ],
    name: "setItemCount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "setName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260006002553480156200001657600080fd5b50604051620018283803806200182883398181016040528101906200003c919062000233565b80600090816200004d9190620004cf565b5033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620005b6565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000ff82620000b4565b810181811067ffffffffffffffff82111715620001215762000120620000c5565b5b80604052505050565b60006200013662000096565b9050620001448282620000f4565b919050565b600067ffffffffffffffff821115620001675762000166620000c5565b5b6200017282620000b4565b9050602081019050919050565b60005b838110156200019f57808201518184015260208101905062000182565b83811115620001af576000848401525b50505050565b6000620001cc620001c68462000149565b6200012a565b905082815260208101848484011115620001eb57620001ea620000af565b5b620001f88482856200017f565b509392505050565b600082601f830112620002185762000217620000aa565b5b81516200022a848260208601620001b5565b91505092915050565b6000602082840312156200024c576200024b620000a0565b5b600082015167ffffffffffffffff8111156200026d576200026c620000a5565b5b6200027b8482850162000200565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002d757607f821691505b602082108103620002ed57620002ec6200028f565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000318565b62000363868362000318565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003b0620003aa620003a4846200037b565b62000385565b6200037b565b9050919050565b6000819050919050565b620003cc836200038f565b620003e4620003db82620003b7565b84845462000325565b825550505050565b600090565b620003fb620003ec565b62000408818484620003c1565b505050565b5b81811015620004305762000424600082620003f1565b6001810190506200040e565b5050565b601f8211156200047f576200044981620002f3565b620004548462000308565b8101602085101562000464578190505b6200047c620004738562000308565b8301826200040d565b50505b505050565b600082821c905092915050565b6000620004a46000198460080262000484565b1980831691505092915050565b6000620004bf838362000491565b9150826002028217905092915050565b620004da8262000284565b67ffffffffffffffff811115620004f657620004f5620000c5565b5b620005028254620002be565b6200050f82828562000434565b600060209050601f83116001811462000547576000841562000532578287015190505b6200053e8582620004b1565b865550620005ae565b601f1984166200055786620002f3565b60005b8281101562000581578489015182556001820191506020850194506020810190506200055a565b86831015620005a157848901516200059d601f89168262000491565b8355505b6001600288020188555050505b505050505050565b61126280620005c66000396000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461013c5780638c55174214610167578063c47f002714610190578063d96a094a146101b95761007b565b806317d7de7c146100805780633129e773146100ab5780637749cf23146100e85780637a7d12f814610113575b600080fd5b34801561008c57600080fd5b506100956101d5565b6040516100a29190610a39565b60405180910390f35b3480156100b757600080fd5b506100d260048036038101906100cd9190610aa5565b610267565b6040516100df9190610bfd565b60405180910390f35b3480156100f457600080fd5b506100fd6103ab565b60405161010a9190610c2e565b60405180910390f35b34801561011f57600080fd5b5061013a60048036038101906101359190610aa5565b6103b5565b005b34801561014857600080fd5b506101516103bf565b60405161015e9190610c6a565b60405180910390f35b34801561017357600080fd5b5061018e60048036038101906101899190610dba565b6103e9565b005b34801561019c57600080fd5b506101b760048036038101906101b29190610e16565b61054d565b005b6101d360048036038101906101ce9190610aa5565b61056e565b005b6060600080546101e490610e8e565b80601f016020809104026020016040519081016040528092919081815260200182805461021090610e8e565b801561025d5780601f106102325761010080835404028352916020019161025d565b820191906000526020600020905b81548152906001019060200180831161024057829003601f168201915b5050505050905090565b61026f610959565b600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546102a790610e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546102d390610e8e565b80156103205780601f106102f557610100808354040283529160200191610320565b820191906000526020600020905b81548152906001019060200180831161030357829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1615151515815250509050919050565b6000600254905090565b8060028190555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008251116103f757600080fd5b6000811161040457600080fd5b6002600081548092919061041790610eee565b91905055506040518060a0016040528060025481526020018381526020018281526020013373ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525060036000600254815260200190815260200160002060008201518160000155602082015181600101908161049291906110e2565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff0219169083151502179055509050507fd7ddc63613888423742b04e7db47af36085e5297b8eb70327528195ad69dd95b60025483833360006040516105419594939291906111d2565b60405180910390a15050565b600081510361055b57600080fd5b806000908161056a91906110e2565b5050565b6000600360008381526020019081526020016000206040518060a0016040529081600082015481526020016001820180546105a890610e8e565b80601f01602080910402602001604051908101604052809291908181526020018280546105d490610e8e565b80156106215780601f106105f657610100808354040283529160200191610621565b820191906000526020600020905b81548152906001019060200180831161060457829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900460ff1615151515815250509050600081606001519050600082600001511180156106ca5750600254826000015111155b6106d357600080fd5b81604001513410156106e457600080fd5b8160800151156106f357600080fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361072b57600080fd5b33826060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600182608001901515908115158152505081600360008581526020019081526020016000206000820151816000015560208201518160010190816107a791906110e2565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff0219169083151502179055509050508073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610862573d6000803e3d6000fd5b50816003600085815260200190815260200160002060008201518160000155602082015181600101908161089691906110e2565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548160ff0219169083151502179055509050507f9ffef392dbd671fb824626dba67eeb10653a6b93088f9f9bac3d51ce5c59eb9960025483602001513433866080015160405161094c9594939291906111d2565b60405180910390a1505050565b6040518060a00160405280600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b600081519050919050565b600082825260208201905092915050565b60005b838110156109da5780820151818401526020810190506109bf565b838111156109e9576000848401525b50505050565b6000601f19601f8301169050919050565b6000610a0b826109a0565b610a1581856109ab565b9350610a258185602086016109bc565b610a2e816109ef565b840191505092915050565b60006020820190508181036000830152610a538184610a00565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610a8281610a6f565b8114610a8d57600080fd5b50565b600081359050610a9f81610a79565b92915050565b600060208284031215610abb57610aba610a65565b5b6000610ac984828501610a90565b91505092915050565b610adb81610a6f565b82525050565b600082825260208201905092915050565b6000610afd826109a0565b610b078185610ae1565b9350610b178185602086016109bc565b610b20816109ef565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5682610b2b565b9050919050565b610b6681610b4b565b82525050565b60008115159050919050565b610b8181610b6c565b82525050565b600060a083016000830151610b9f6000860182610ad2565b5060208301518482036020860152610bb78282610af2565b9150506040830151610bcc6040860182610ad2565b506060830151610bdf6060860182610b5d565b506080830151610bf26080860182610b78565b508091505092915050565b60006020820190508181036000830152610c178184610b87565b905092915050565b610c2881610a6f565b82525050565b6000602082019050610c436000830184610c1f565b92915050565b6000610c5482610b2b565b9050919050565b610c6481610c49565b82525050565b6000602082019050610c7f6000830184610c5b565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cc7826109ef565b810181811067ffffffffffffffff82111715610ce657610ce5610c8f565b5b80604052505050565b6000610cf9610a5b565b9050610d058282610cbe565b919050565b600067ffffffffffffffff821115610d2557610d24610c8f565b5b610d2e826109ef565b9050602081019050919050565b82818337600083830152505050565b6000610d5d610d5884610d0a565b610cef565b905082815260208101848484011115610d7957610d78610c8a565b5b610d84848285610d3b565b509392505050565b600082601f830112610da157610da0610c85565b5b8135610db1848260208601610d4a565b91505092915050565b60008060408385031215610dd157610dd0610a65565b5b600083013567ffffffffffffffff811115610def57610dee610a6a565b5b610dfb85828601610d8c565b9250506020610e0c85828601610a90565b9150509250929050565b600060208284031215610e2c57610e2b610a65565b5b600082013567ffffffffffffffff811115610e4a57610e49610a6a565b5b610e5684828501610d8c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610ea657607f821691505b602082108103610eb957610eb8610e5f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ef982610a6f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610f2b57610f2a610ebf565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610f987fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610f5b565b610fa28683610f5b565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610fdf610fda610fd584610a6f565b610fba565b610a6f565b9050919050565b6000819050919050565b610ff983610fc4565b61100d61100582610fe6565b848454610f68565b825550505050565b600090565b611022611015565b61102d818484610ff0565b505050565b5b818110156110515761104660008261101a565b600181019050611033565b5050565b601f8211156110965761106781610f36565b61107084610f4b565b8101602085101561107f578190505b61109361108b85610f4b565b830182611032565b50505b505050565b600082821c905092915050565b60006110b96000198460080261109b565b1980831691505092915050565b60006110d283836110a8565b9150826002028217905092915050565b6110eb826109a0565b67ffffffffffffffff81111561110457611103610c8f565b5b61110e8254610e8e565b611119828285611055565b600060209050601f83116001811461114c576000841561113a578287015190505b61114485826110c6565b8655506111ac565b601f19841661115a86610f36565b60005b828110156111825784890151825560018201915060208501945060208101905061115d565b8683101561119f578489015161119b601f8916826110a8565b8355505b6001600288020188555050505b505050505050565b6111bd81610b4b565b82525050565b6111cc81610b6c565b82525050565b600060a0820190506111e76000830188610c1f565b81810360208301526111f98187610a00565b90506112086040830186610c1f565b61121560608301856111b4565b61122260808301846111c3565b969550505050505056fea264697066735822122064b52627e0de30b2a9836ed78162fc3a37faf4132cfe78cae02d7424d91a3b0464736f6c634300080f0033";

type MarketplaceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MarketplaceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Marketplace__factory extends ContractFactory {
  constructor(...args: MarketplaceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Marketplace> {
    return super.deploy(_name, overrides || {}) as Promise<Marketplace>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_name, overrides || {});
  }
  override attach(address: string): Marketplace {
    return super.attach(address) as Marketplace;
  }
  override connect(signer: Signer): Marketplace__factory {
    return super.connect(signer) as Marketplace__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketplaceInterface {
    return new utils.Interface(_abi) as MarketplaceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Marketplace {
    return new Contract(address, _abi, signerOrProvider) as Marketplace;
  }
}
