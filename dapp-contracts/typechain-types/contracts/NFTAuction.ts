/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface NFTAuctionInterface extends utils.Interface {
  functions: {
    "auctionEndTime()": FunctionFragment;
    "auctionStartTime()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "collectionId()": FunctionFragment;
    "endAuction()": FunctionFragment;
    "highestBid()": FunctionFragment;
    "highestBidder()": FunctionFragment;
    "isEnded()": FunctionFragment;
    "isStarted()": FunctionFragment;
    "itemId()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "placeBid()": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "startAuction()": FunctionFragment;
    "startPrice()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionEndTime"
      | "auctionStartTime"
      | "beneficiary"
      | "collectionId"
      | "endAuction"
      | "highestBid"
      | "highestBidder"
      | "isEnded"
      | "isStarted"
      | "itemId"
      | "onERC721Received"
      | "placeBid"
      | "reservePrice"
      | "startAuction"
      | "startPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collectionId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isEnded", values?: undefined): string;
  encodeFunctionData(functionFragment: "isStarted", values?: undefined): string;
  encodeFunctionData(functionFragment: "itemId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "placeBid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startAuction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startPrice",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEnded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStarted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "itemId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "placeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startPrice", data: BytesLike): Result;

  events: {
    "AuctionEnded(address,uint256)": EventFragment;
    "AuctionStarted(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "BidPlaced(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
}

export interface AuctionEndedEventObject {
  winner: string;
  amount: BigNumber;
}
export type AuctionEndedEvent = TypedEvent<
  [string, BigNumber],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface AuctionStartedEventObject {
  beneficiary: string;
  collectionId: BigNumber;
  itemId: BigNumber;
  reservePrice: BigNumber;
  startPrice: BigNumber;
  auctionStartTime: BigNumber;
  auctionEndTime: BigNumber;
  started: boolean;
}
export type AuctionStartedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ],
  AuctionStartedEventObject
>;

export type AuctionStartedEventFilter = TypedEventFilter<AuctionStartedEvent>;

export interface BidPlacedEventObject {
  bidder: string;
  amount: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [string, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface NFTAuction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTAuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    collectionId(overrides?: CallOverrides): Promise<[BigNumber]>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    highestBid(overrides?: CallOverrides): Promise<[BigNumber]>;

    highestBidder(overrides?: CallOverrides): Promise<[string]>;

    isEnded(overrides?: CallOverrides): Promise<[boolean]>;

    isStarted(overrides?: CallOverrides): Promise<[boolean]>;

    itemId(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    startAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startPrice(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  auctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  auctionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  collectionId(overrides?: CallOverrides): Promise<BigNumber>;

  endAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  highestBid(overrides?: CallOverrides): Promise<BigNumber>;

  highestBidder(overrides?: CallOverrides): Promise<string>;

  isEnded(overrides?: CallOverrides): Promise<boolean>;

  isStarted(overrides?: CallOverrides): Promise<boolean>;

  itemId(overrides?: CallOverrides): Promise<BigNumber>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  placeBid(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

  startAuction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startPrice(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    auctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    auctionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    collectionId(overrides?: CallOverrides): Promise<BigNumber>;

    endAuction(overrides?: CallOverrides): Promise<void>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidder(overrides?: CallOverrides): Promise<string>;

    isEnded(overrides?: CallOverrides): Promise<boolean>;

    isStarted(overrides?: CallOverrides): Promise<boolean>;

    itemId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    placeBid(overrides?: CallOverrides): Promise<void>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    startAuction(overrides?: CallOverrides): Promise<void>;

    startPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuctionEnded(address,uint256)"(
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(
      winner?: PromiseOrValue<string> | null,
      amount?: null
    ): AuctionEndedEventFilter;

    "AuctionStarted(address,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      beneficiary?: PromiseOrValue<string> | null,
      collectionId?: null,
      itemId?: null,
      reservePrice?: null,
      startPrice?: null,
      auctionStartTime?: null,
      auctionEndTime?: null,
      started?: null
    ): AuctionStartedEventFilter;
    AuctionStarted(
      beneficiary?: PromiseOrValue<string> | null,
      collectionId?: null,
      itemId?: null,
      reservePrice?: null,
      startPrice?: null,
      auctionStartTime?: null,
      auctionEndTime?: null,
      started?: null
    ): AuctionStartedEventFilter;

    "BidPlaced(address,uint256)"(
      bidder?: PromiseOrValue<string> | null,
      amount?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      bidder?: PromiseOrValue<string> | null,
      amount?: null
    ): BidPlacedEventFilter;
  };

  estimateGas: {
    auctionEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    auctionStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    collectionId(overrides?: CallOverrides): Promise<BigNumber>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidder(overrides?: CallOverrides): Promise<BigNumber>;

    isEnded(overrides?: CallOverrides): Promise<BigNumber>;

    isStarted(overrides?: CallOverrides): Promise<BigNumber>;

    itemId(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    startAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startPrice(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectionId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    highestBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highestBidder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnded(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStarted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    itemId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    placeBid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startAuction(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
